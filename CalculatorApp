import math
import pygame

# Initialization
pygame.init()
pygame.font.init()

# Screen Setup
WIDTH, HEIGHT = 600, 800
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption('Da Calc')

# Clock & FPS
FPS = 60
clock = pygame.time.Clock()

# Font
font = pygame.font.SysFont(None, 36)

# Colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GRAY = (128, 128, 128)

# Button Settings
BUTTON_WIDTH = 80
BUTTON_HEIGHT = 60
PADDING = 10
START_Y = 200

buttons = [
    ["7", "8", "9", "/"],
    ["4", "5", "6", "*"],
    ["1", "2", "3", "-"],
    ["0", ".", "=", "+"],
    ["C", "√", "^", ""]
]

#Expression
current_expression = ""

#Making buttons
buttons_rectangles = []

def build_buttons():
    global buttons_rectangles
    buttons_rectangles = []
    y = START_Y
    for row in buttons:
        x = 50
        row_rects = []
        for symbol in row:
            rect = pygame.Rect(x, y, BUTTON_WIDTH, BUTTON_HEIGHT)
            row_rects.append((rect, symbol))
            x += BUTTON_WIDTH + PADDING
        y += BUTTON_HEIGHT + PADDING
        buttons_rectangles += row_rects


def draw_buttons():
    for rect, symbol in buttons_rectangles  :
        pygame.draw.rect(screen, GRAY, rect, border_radius=10)
        text = font.render(symbol, True, WHITE)
        txt_rect = text.get_rect(center=rect.center)
        screen.blit(text, txt_rect)


def draw_expression():
    exp_text = font.render(current_expression, True, WHITE)
    screen.blit(exp_text, (50, 100))


def draw_fps():
    real_fps = int(clock.get_fps())
    fps_text = font.render(f"FPS: {real_fps}", True, WHITE)
    screen.blit(fps_text, (10, 10))

def handle_click(pos):
    global current_expression
    for rect, symbol in buttons_rectangles:
        if rect.collidepoint(pos):
            if symbol == "":
                return
            elif symbol == "C":
                current_expression = ""
            elif symbol == "=":
                try:
                    current_expression = str(eval(current_expression))
                except:
                    current_expression = "ERROR"
            elif symbol == "√":
                try:
                    current_expression = str(math.sqrt(float(current_expression)))
                except:
                    current_expression = "ERROR"
            else:
                current_expression += symbol        

# Math functions
def addition(a, b):
    return a + b

def subtraction(a, b):
    return a - b

def multiplication(a, b):
    return a * b

def division(a, b): 
    if b == 0:
        return "Undefined"
    else:
        return a / b

def power(a, b):
    return a ** b

def sqrt(a): 
    return math.sqrt(a)

# Clearing function
def clear():
    pass

def draw_fps():
    real_fps = int(clock.get_fps())
    fps_text = font.render(f"FPS: {real_fps}", True, WHITE)
    screen.blit(fps_text, (10, 10))

# Main loop
def main():
    global current_expression
    build_buttons()

    running = True
    while running:
        # Handle even (run screen)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

            if event.type == pygame.MOUSEBUTTONDOWN:
                handle_click(event.pos)

        # Paint Background
        screen.fill(BLACK)

        # Draw UI
        draw_fps()
        draw_expression()
        draw_buttons()

        # Refresh Display
        pygame.display.flip()
        clock.tick(FPS)

    pygame.quit()

# Run
if __name__ == "__main__":
    main()